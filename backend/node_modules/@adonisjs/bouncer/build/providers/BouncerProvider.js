"use strict";
/*
 * @adonisjs/bouncer
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Lazily resolves the user from the auth module. Coz the bouncer
 * property may get access before the auth middleware is
 * executed.
 */
class AuthUserResolver {
    constructor(auth) {
        this.auth = auth;
        this.getUser = () => this.auth.user;
    }
}
class BouncerServiceProvider {
    constructor(app) {
        this.app = app;
    }
    /**
     * Register bouncer to the container
     */
    register() {
        this.app.container.singleton('Adonis/Addons/Bouncer', () => {
            const { Bouncer } = require('../src/Bouncer');
            return new Bouncer(this.app);
        });
    }
    /**
     * Hook into the http context to provide an authorizer instance
     */
    boot() {
        this.app.container.withBindings(['Adonis/Core/HttpContext', 'Adonis/Addons/Bouncer'], (HttpContext, Bouncer) => {
            HttpContext.getter('bouncer', function bouncer() {
                return Bouncer.forUser(this.auth ? new AuthUserResolver(this.auth).getUser : null);
            }, true);
        });
        this.app.container.withBindings(['Adonis/Core/Server', 'Adonis/Core/View'], (Server, View) => {
            const { CanTag, CannotTag } = require('../src/Bindings/View');
            View.registerTag(CanTag);
            View.registerTag(CannotTag);
            Server.hooks.before(async (ctx) => {
                ctx.view.share({ bouncer: ctx.bouncer });
            });
        });
    }
}
exports.default = BouncerServiceProvider;
