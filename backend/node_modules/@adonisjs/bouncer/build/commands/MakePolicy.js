"use strict";
/*
 * @adonisjs/bouncer
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const helpers_1 = require("@poppinss/utils/build/helpers");
const standalone_1 = require("@adonisjs/core/build/standalone");
/**
 * Stubs for the policy actions
 */
const ACTIONS_STUBS = (userVariable, userModel, resourceVariable, resourceModel) => {
    return {
        viewList: `public async viewList(${userVariable}: ${userModel}) {}`,
        view: `public async view(${userVariable}: ${userModel}, ${resourceVariable}: ${resourceModel}) {}`,
        create: `public async create(${userVariable}: ${userModel}) {}`,
        update: `public async update(${userVariable}: ${userModel}, ${resourceVariable}: ${resourceModel}) {}`,
        delete: `public async delete(${userVariable}: ${userModel}, ${resourceVariable}: ${resourceModel}) {}`,
    };
};
/**
 * Command to create a new policy
 */
class MakePolicyCommand extends standalone_1.BaseCommand {
    /**
     * Makes the namespace for a given model
     */
    makeModelNamespace(model) {
        const modelsNamespace = this.application.rcFile.namespaces.models;
        return `${modelsNamespace}/${model.replace(new RegExp(`^${modelsNamespace}/`), '')}`;
    }
    /**
     * Makes the model variable name
     */
    makeModelVariable(model) {
        return helpers_1.string.camelCase(model);
    }
    /**
     * Prompt for models when not explicitly defined
     */
    async prepare() {
        if (!this.resourceModel) {
            this.resourceModel = await this.prompt.ask('Enter the name of the resource model to authorize', {
                hint: 'optional',
            });
        }
        if (!this.userModel) {
            this.userModel = await this.prompt.ask('Enter the name of the user model to be authorized', {
                hint: 'optional',
                default: 'User',
            });
        }
    }
    /**
     * Run the command
     */
    async run() {
        /**
         * Prompt for actions when actions are not defined, but resourceModel is
         * defined
         */
        if (this.resourceModel && (!this.actions || !this.actions.length)) {
            this.actions = await this.prompt.multiple('Select the actions you want to authorize', [
                'None',
                'viewList',
                'view',
                'create',
                'update',
                'delete',
            ]);
        }
        /**
         * Create actions when one or more actions are selected and "None" is not
         * selected
         */
        const createActions = this.actions && this.actions.length && !this.actions.includes('None');
        /**
         * Actions stubs
         */
        const actionsStubs = createActions
            ? ACTIONS_STUBS(this.makeModelVariable(this.userModel), this.userModel, this.makeModelVariable(this.resourceModel), this.resourceModel)
            : {};
        /**
         * Policy import
         */
        const imports = createActions
            ? [
                `import ${this.userModel} from '${this.makeModelNamespace(this.userModel)}'`,
                `import ${this.resourceModel} from '${this.makeModelNamespace(this.resourceModel)}'`,
            ]
            : [];
        const stub = path_1.join(__dirname, '..', 'templates', 'policy.txt');
        const path = this.application.resolveNamespaceDirectory('policies');
        const policiesNamespace = this.application.rcFile.namespaces.policies || 'App/Policies';
        const file = this.generator
            .addFile(this.name, { pattern: 'pascalcase', suffix: 'Policy' })
            .stub(stub)
            .destinationDir(path || 'app/Policies')
            .useMustache()
            .apply({
            actions: createActions
                ? this.actions.reduce((result, action) => {
                    if (actionsStubs[action]) {
                        result = result.concat(actionsStubs[action]);
                    }
                    return result;
                }, [])
                : [],
            imports,
        })
            .appRoot(this.application.cliCwd || this.application.appRoot);
        await this.generator.run();
        const fileJSON = file.toJSON();
        if (fileJSON.state === 'persisted') {
            this.ui
                .instructions()
                .heading('Register Policy')
                .add(`Open ${this.colors.cyan('start/bouncer.ts')} file`)
                .add(`Navigate to ${this.colors.cyan('bouncer.registerPolicies')} function call`)
                .add(`Add ${this.colors
                .cyan()
                .underline(`${fileJSON.filename}: () => import('${policiesNamespace}/${fileJSON.filename}')`)} to the object`)
                .render();
        }
    }
}
MakePolicyCommand.commandName = 'make:policy';
MakePolicyCommand.description = 'Make a new bouncer policy';
__decorate([
    standalone_1.args.string({ description: 'Name of the policy to create' }),
    __metadata("design:type", String)
], MakePolicyCommand.prototype, "name", void 0);
__decorate([
    standalone_1.flags.string({
        description: 'Name of the resource model to authorize',
    }),
    __metadata("design:type", String)
], MakePolicyCommand.prototype, "resourceModel", void 0);
__decorate([
    standalone_1.flags.string({
        description: 'Name of the user model to be authorized',
    }),
    __metadata("design:type", String)
], MakePolicyCommand.prototype, "userModel", void 0);
__decorate([
    standalone_1.flags.array({
        description: 'Actions to implement',
    }),
    __metadata("design:type", Array)
], MakePolicyCommand.prototype, "actions", void 0);
exports.default = MakePolicyCommand;
