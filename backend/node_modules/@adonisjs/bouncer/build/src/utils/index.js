"use strict";
/*
 * @adonisjs/bouncer
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.hookHasHandledTheRequest = exports.profileFunction = exports.normalizeActionResponse = exports.normalizeHookResponse = void 0;
const ERROR_MESSAGE = 'Not authorized to perform this action';
const ERROR_STATUS = 403;
/**
 * Normalizes the authorization hook response
 */
function normalizeHookResponse(response) {
    return {
        status: response === null || response === undefined
            ? 'skipped'
            : response === true
                ? 'authorized'
                : 'unauthorized',
    };
}
exports.normalizeHookResponse = normalizeHookResponse;
/**
 * Normalizes the authorization action response
 */
function normalizeActionResponse(response) {
    /**
     * Explicit true is considered a pass
     */
    if (response === true) {
        return {
            authorized: true,
            errorResponse: null,
        };
    }
    /**
     * Handle "Bouncer.deny" calls
     */
    if (Array.isArray(response) && response.length) {
        const [message, status] = response;
        return {
            authorized: false,
            errorResponse: [message || 'Unauthorized Access', status || 403],
        };
    }
    /**
     * Everything else is marked as a failure
     */
    return {
        authorized: false,
        errorResponse: [ERROR_MESSAGE, ERROR_STATUS],
    };
}
exports.normalizeActionResponse = normalizeActionResponse;
/**
 * Profile a function call
 */
async function profileFunction(actionName, data, fn, args) {
    if (!this.actionProfiler) {
        return fn(...args);
    }
    const action = this.actionProfiler.create(actionName, data);
    try {
        const response = await fn(...args);
        action.end();
        return response;
    }
    catch (error) {
        action.end({ error });
        throw error;
    }
}
exports.profileFunction = profileFunction;
/**
 * Inspect response to check if hook has hanlded the request
 * already or not
 */
function hookHasHandledTheRequest(response) {
    return response !== null && response !== undefined;
}
exports.hookHasHandledTheRequest = hookHasHandledTheRequest;
