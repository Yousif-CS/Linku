/// <reference path="../../adonis-typings/index.d.ts" />
/// <reference types="@adonisjs/profiler/build/adonis-typings/profiler" />
import { ProfilerContract, ProfilerRowContract } from '@ioc:Adonis/Core/Profiler';
import { PoliciesList, PoliciesAuthorizerContract } from '@ioc:Adonis/Addons/Bouncer';
import { Bouncer } from '../Bouncer';
/**
 * Exposes the API to authorize actions using a policy class
 */
export declare class PoliciesAuthorizer implements PoliciesAuthorizerContract<any, keyof PoliciesList> {
    private userOrResolver;
    private bouncer;
    private policy;
    /**
     * An optional profiler instance to profile the actions. Usually it will
     * be an instance of the current HTTP request profiler
     */
    private profiler?;
    /**
     * The instance of the policy class. We need to resolve it only
     * once per authorizer instance
     */
    private policyInstance;
    /**
     * We lookup the user lazily using the "userOrResolver" property. This
     * allows the class consumer to provide the user after creating
     * the authorizer instance.
     *
     * We stop calling the resolver, once we receive the user instance.
     */
    user: any;
    constructor(userOrResolver: any, bouncer: Bouncer, policy: string);
    /**
     * Resolve policy
     */
    private resolvePolicy;
    /**
     * Resolve the user from the userOrResolver
     * property
     */
    private resolveUser;
    /**
     * Run before/after hooks for a given lifecycle phase
     */
    private runHooks;
    /**
     * Run the action
     */
    private runAction;
    /**
     * Run the authorization action
     */
    private authorizeAction;
    /**
     * Set profiler instance to be used for profiling calls
     */
    setProfiler(profiler?: ProfilerRowContract | ProfilerContract): this;
    /**
     * Find if a user is allowed to perform the action
     */
    allows(action: string, ...args: any[]): Promise<boolean>;
    /**
     * Find if a user is not allowed to perform the action
     */
    denies(action: string, ...args: any[]): Promise<boolean>;
    /**
     * Authorize user against the given action
     */
    authorize(action: string, ...args: any[]): Promise<void>;
    /**
     * Create a new authorizer instance for a given user
     */
    forUser(userOrResolver: any): PoliciesAuthorizer;
}
